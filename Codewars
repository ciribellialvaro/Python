
# Square Every Digit


# Challenge 1.In this kata, you are asked to square every digit of a number.
# For example, if we run 9119 through the function, 811181 will come out, because 92 is 81 and 12 is 1.
# Note: The function accepts an integer and returns an integer
# Solution:
def multiply(a, b):
  return a * b
  

# Challenge 2. Isograms
# An isogram is a word that has no repeating letters, consecutive or non-consecutive. 
# Implement a function that determines whether a string that contains only letters is an isogram. 
# Assume the empty string is an isogram. Ignore letter case.
# is_isogram("Dermatoglyphics" ) == true
# is_isogram("aba" ) == false
# is_isogram("moOse" ) == false # -- ignore letter case

# Solution:
def is_isogram(string):
    string = string.lower()
    for char in string:
        if string.count(char) > 1:
            return False
    return True
    
    
# Challenge 3 Create Phone Number
# Write a function that accepts an array of 10 integers (between 0 and 9),
# that returns a string of those numbers in the form of a phone number.
# Example: create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # => returns "(123) 456-7890"
# The returned format must be correct in order to complete this challenge.
# Don't forget the space after the closing parentheses!
 
# Solution:
return '({0}{1}{2}) {3}{4}{5}-{6}{7}{8}{9}'.format(*n)



# Challenge 4 - Bit Counting
# Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.
#Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case

# Solution:
def countBits(n):
  n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)
  n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)
  n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)
  n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)
  n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)
  n = (n & 0x00000000FFFFFFFF) + ((n & 0xFFFFFFFF00000000) >> 32) # This last & isn't strictly necessary.
  return n




# Challenge 5 - Credit Card Mask
# Usually when you buy something, you're asked whether your credit card number, 
# phone number or answer to your most secret question is still correct. 
# However, since someone could look over your shoulder, you don't want that shown on your screen. Instead, we mask it.
# Your task is to write a function maskify, which changes all but the last four characters into '#'.
# Examples
# maskify("4556364607935616") == "############5616"
# maskify(     "64607935616") ==      "#######5616"
# maskify(               "1") ==                "1"
# maskify(                "") ==                 ""

# # "What was the name of your first pet?"
# maskify("Skippy")                                   == "##ippy"
# maskify("Nananananananananananananananana Batman!") == "####################################man!"
# 
# Solution:
def maskify(cc):

    maskify = cc
    maskifyL= len(maskify) - 4

    char = ""
    a=0

    if maskifyL <= 2:
       c2 = cc
    else:
        for a in range(maskifyL):
            char += "#"
            a += 1
        c2 = maskify.replace(maskify[:maskifyL], char, maskifyL)

    return c2



# Challenge 6 - Categorize New Member
# The Western Suburbs Croquet Club has two categories of membership, Senior and Open. They would like your help with an application form that will tell prospective members which category they will be placed.

# To be a senior, a member must be at least 55 years old and have a handicap greater than 7. In this croquet club, handicaps range from -2 to +26; the better the player the lower the handicap.

# Input
# Input will consist of a list of lists containing two items each. Each list contains information for a single potential member. Information consists of an integer for the person's age and an integer for the person's handicap.

# Note for F#: The input will be of (int list list) which is a List<List>

# Example Input
# [[18, 20],[45, 2],[61, 12],[37, 6],[21, 21],[78, 9]]
# Output
# Output will consist of a list of string values (in Haskell: Open or Senior) stating whether the respective member is to be placed in the senior or open category.

# Example Output
# ["Open", "Open", "Senior", "Open", "Open", "Senior"]
# Solution:
def openOrSenior(data):
    # Hmmm.. Where to start?
   return ["Senior" if m[0]>54 and m[1]>7 else "Open" for m in data]



# Challenge 7 - Regex validate PIN code
# ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits.
# if the function is passed a valid PIN string, return true, else return false.
# eg:
# validate_pin("1234") == True
# validate_pin("12345") == False
# validate_pin("a234") == False
# Solution:
def validate_pin(pin):
    #return true or false
 return len(pin) in (4, 6) and pin.isdigit()




# Challenge 8 - Does my number look big in this?
# A Narcissistic Number is a number which is the sum of its own digits, each raised to the power of the number of digits in a given base. In this Kata, we will restrict ourselves to decimal (base 10).

# For example, take 153 (3 digits):

#    1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153
# and 1634 (4 digits):

#     1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256 = 1634
# The Challenge:

# Your code must return true or false depending upon whether the given number is a Narcissistic number in base 10.

# Error checking for text strings or other invalid inputs is not required, only valid integers will be passed into the function.
# 
# 
# Solution:
def narcissistic( value ):
    return value == sum([int(x) ** len(str(value)) for x in str(value)])




# Challenge 9 - Duplicate Encoder
# 
# The goal of this exercise is to convert a string to a new string where each character 
# in the new string is "(" if that character appears only once in the original string, or ")" 
# if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.

#Examples
#"din"      =>  "((("
#"recede"   =>  "()()()"
#"Success"  =>  ")())())"
#"(( @"     =>  "))((" 
#Notes

#Assertion messages may be unclear about what they display in some languages. 
# If you read "...It Should encode XXX", the "XXX" is the expected result, not the input!
# 
# Solution:
def duplicate_encode(word):
    #your code here
  return "".join(["(" if word.lower().count(c) == 1 else ")" for c in word.lower()])



# Challenge 10 - IQ Test
# 
# Bob is preparing to pass IQ test. The most frequent task in this test is to find out which one of the given numbers
# differs from the others. Bob observed that one number usually differs from the others in evenness.
# Help Bob â€” to check his answers, he needs a program that among the given 
# numbers finds one that is different in evenness, and return a position of this number.

# ! Keep in mind that your task is to help Bob solve a real IQ test, which means indexes of the elements start from 1 (not 0)

##Examples :

# iq_test("2 4 7 8 10") => 3 // Third number is odd, while the rest of the numbers are even

# iq_test("1 2 1 1") => 2 // Second number is even, while the rest of the numbers are odd
# 
# Solution:
def iq_test(numbers):

    temp_list = []
    for i in numbers.split(' '):
        temp_list.append(str(int(i)%2))
    if temp_list.count("1") > temp_list.count("0"):
        return temp_list.index("0")+1
    else:
        return temp_list.index("1")+1



# Challenge 11 - Highest Scoring Word
# 
# Given a string of words, you need to find the highest scoring word.

# Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.

# You need to return the highest scoring word as a string.

# If two words score the same, return the word that appears earliest in the original string.

# All letters will be lowercase and all inputs will be valid.
# 
# Solution:
def high(x):
   
    arr,numArr= x.split(' '),[]
    for val in arr:
        intNum = 0
        letters = list(val)
        for word in letters:
            intNum += ord(word) - 96
        numArr.append(intNum)
    return arr[numArr.index(max(numArr))]

